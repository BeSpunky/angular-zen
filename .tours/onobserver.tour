{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "*onObserver",
  "steps": [
    {
      "directory": "libs/angular-zen/core/rxjs/on-observer",
      "description": "# OnObserverModule\r\nThis module provides directives which facilitate rendering templates on certain observable states. Instead of manually subscribing to an observable, then implementing an `*ngIf`, developers will be able to place one of the following on an element:\r\n\r\n* `*onObserverResolving` - Renders the template when the observable is waiting for its first value.\r\n* `*onObserverNext` - Renders the template on value emissions.\r\n* `*onObserverComplete` - Renders the template when the observable completes.\r\n* `*onObserverError` - Renders the template when the observable throws an error.\r\n* `*onObserverActive` - Renders the template when the observable is either waiting for its first value or emits a value.\r\n* `*onObserverFinalized` - Renders the template when the observable has either completed or thrown an error.\r\n\r\nThe directives will unrender the template when the observable is in a state different to the one(s) they should intercept."
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/on-observer-base.directive.ts",
      "description": "## OnObserverBaseDirective\r\n\r\nAll variations of the `*onObserver` directive extend from the `OnObserverBaseDirective` class.\r\n\r\nThe base class takes care of tracking the observable, then rendering and unrendering the view.",
      "line": 81
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/on-observer-base.directive.ts",
      "description": "### Abstract properties\r\n\r\nAs the base directive doesn't know what the selector will be, nor does it know which calls should be intercepted, it has been created `abstract` and forces extending classes to provide that information.",
      "line": 102,
      "selection": {
        "start": {
          "line": 102,
          "character": 1
        },
        "end": {
          "line": 119,
          "character": 1
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/on-observer-base.directive.ts",
      "description": "### Microsyntax setters\r\n\r\nThe directive provides different configurable features. To use them, users need to provide their values using microsyntax properties.\r\n\r\nTo enable microsyntax properties, Angular requires the directive class to define `@Input() set <selector><property>` setters.\r\nBecause the selector (e.g. `'onObserverNext'`, `'onObserverError'`, etc.) cannot be deduced by the base class on compile-time, the base class defines `protected` members and requires (hopes) extending directives to implement the correct respective setters.",
      "line": 119,
      "selection": {
        "start": {
          "line": 120,
          "character": 1
        },
        "end": {
          "line": 229,
          "character": 1
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/on-observer-base.directive.ts",
      "description": "### Microsyntax setters documentation\r\n\r\nThe requirement for the [`@Input() set` properties][#4] is expressed in the documentation for the `protected` members, and also in the documentation of the base directive.",
      "selection": {
        "start": {
          "line": 129,
          "character": 1
        },
        "end": {
          "line": 132,
          "character": 1
        }
      },
      "line": 128
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/directives/on-observer-next.directive.ts",
      "description": "### Abstract members implementation example",
      "line": 23,
      "selection": {
        "start": {
          "line": 22,
          "character": 1
        },
        "end": {
          "line": 24,
          "character": 1
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/directives/on-observer-next.directive.ts",
      "description": "### @Input() set properties for microsyntax implementation example\r\n",
      "line": 124,
      "selection": {
        "start": {
          "line": 24,
          "character": 1
        },
        "end": {
          "line": 125,
          "character": 1
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/directives/on-observer-next.directive.ts",
      "description": "### Strong typing the view context\r\nThe Angular Language Service needs a static `ngTemplateContextGuard()` method to enable strong-typing of the data passed to the rendered view.\r\nHowever, it cannot detect the static member if it is defined on the base class, which is why every extending class also implements the static guard method.",
      "line": 125,
      "selection": {
        "start": {
          "line": 126,
          "character": 1
        },
        "end": {
          "line": 127,
          "character": 1
        }
      }
    },
    {
      "title": "Render flow",
      "description": "## Render flow\r\nThe directive allows specifying an optional delay before rendering the view once a call is intercepted, and also allows specifying an optional timeout for the view to auto-destroy.\r\n\r\n> intercepted call >> (delay) >> render >> (countdown) >> (destroy)\r\n\r\nAs the directive allows for render delays, multiple view mode and other features, there's a lot of room for inconcistency.\r\nThink of an observable which emits everytime a database value changes... There's no way of telling when it would emit, which might lead to unwanted behavior.\r\n\r\nFor example, for an observable that emits a new value around the same time the auto-destroys timer hits zero, the directive might endup rendering the view for a split second, then destroying it before the user had a chance to look at the result.\r\nAlternatively, a view that should've been auto-destroyed might stay alive on the screen, which would both implicate UX and cause memory leaks.\r\n\r\n## Solution\r\nTo avoid inconcistencies, the directive defines a concept called \"commitment to render\". Once it was determinted that an intercepted call should be rendered, the directive commits to render it by creating an observable which will take care of the render flow.\r\n\r\nThe render flow (simplified) is done in two stages. Each time a call is intercepted by the directive:\r\n1. Commitments to render are reproduced with updated parameters.\r\n2. Subscription to the last commitments cancels and switchs to the new ones.\r\n\r\nContinue reading for the details..."
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/on-observer-base.directive.ts",
      "description": "## Render flow - Global commitments state\r\nThe directive stores activated commitments parameterization in a global map, which is updated by the pipeline on each call interception.",
      "line": 91,
      "selection": {
        "start": {
          "line": 83,
          "character": 1
        },
        "end": {
          "line": 91,
          "character": 1
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/on-observer-base.directive.ts",
      "description": "## Render flow - Single pipeline\r\nTo ensure consistency, there is a single pipeline. In other words, this is the one and only explicit subscription point in the directive. Nothing else works in parallel.",
      "line": 253
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/on-observer-base.directive.ts",
      "description": "## Render flow - Pipeline logic\r\n\r\nSimplified, this is the entire pipeline logic as described in [Render flow][#9]:\r\n1. When the directive gets assigned with a new observable, that observable gets materialized using `this.observeInput()` and the pipeline is switched to the new materialized observable.\r\n2. Any call intercepted by the materialized observable is then translated to commitments descriptor objects.\r\n3. Commitments are recreated by `this.onCommitmentsChanged()` and the pipeline is switched to the joined commitments.\r\n\r\nThe pipeline is composed of `switchMap`s to ensure that each change completely resets pipeline execution (but not parameterization).",
      "line": 289,
      "selection": {
        "start": {
          "line": 290,
          "character": 1
        },
        "end": {
          "line": 293,
          "character": 1
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/types/view-render-commitment.ts",
      "description": "## Render commitments\r\nA commitment to render is described in a parameterized object, which is then used to create an observable pipeline that actually executes the commitment.",
      "line": 17
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/types/view-render-commitment.ts",
      "description": "## Render commitments - commitmentId\r\nEach commitment has an id which can be used for identifying it later on in the [global commitments map][#10] in order to update or destroy it.\r\nThe id is determined when the commitment is created. It will always be the timestamp at which the commitment was first created.\r\nWhen the commitment is updated, its id is copied and kept as is.\r\n\r\nThe commitment object cannot be instantiated using the constructor (it's `private`), and must be instantiated using one of the static methods...",
      "line": 24
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/types/view-render-commitment.ts",
      "description": "## Render commitments - Creation\r\nWhen an intercepted call is defined is renderable for the first time, the first commitment creation determines the id for the commitment, along with the first delay timestamps.",
      "line": 72,
      "selection": {
        "start": {
          "line": 56,
          "character": 1
        },
        "end": {
          "line": 73,
          "character": 1
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/types/view-render-commitment.ts",
      "description": "## Render commitments - Creation\r\nA new commitment always defines the time to render as `now + showAfter`, meaning \"delay rendering in until {showAfter} milliseconds have passed from now\".",
      "line": 71,
      "selection": {
        "start": {
          "line": 71,
          "character": 83
        },
        "end": {
          "line": 71,
          "character": 98
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/types/view-render-commitment.ts",
      "description": "## Render commitments - Update\r\nIn single view mode, in case of multiple emissions from the observable, the view context's value should be updated. So, when a view is already rendered in single view mode, the state is cloned with a different call value.\r\n\r\nThis will ensure that the directive passes the new value to the rendered view.",
      "line": 87,
      "selection": {
        "start": {
          "line": 87,
          "character": 61
        },
        "end": {
          "line": 87,
          "character": 65
        }
      }
    },
    {
      "file": "libs/angular-zen/core/rxjs/on-observer/abstraction/types/view-render-commitment.ts",
      "description": "## Render commitments - Rendering\r\nOnce a render commitment observable has rendered the view, the commitment should be updated and the view should be stored along with it.\r\nThis allows access to it by `commitmentId` later on in order to update or destroy it.\r\n\r\nThe static `rendered()` method will clone the commitment with an updated view.",
      "line": 102,
      "selection": {
        "start": {
          "line": 102,
          "character": 121
        },
        "end": {
          "line": 102,
          "character": 125
        }
      }
    }
  ]
}